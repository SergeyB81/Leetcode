class TreeNode:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞"""
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


class Solution:
    def sumEvenGrandparent(self, root: TreeNode) -> int:
        """–§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ —á—ë—Ç–Ω—ã—Ö –¥–µ–¥—É—à–µ–∫"""
        print("üìå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏:")
        self.print_tree_with_indices(root)
        print("\nüìå –í—ã–≤–æ–¥ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è —Å—É–º–º—ã:")
        return self.dfs(root, None, None)

    def print_tree_with_indices(self, root):
        """–í—ã–≤–æ–¥ –¥–µ—Ä–µ–≤–∞ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ —É–∑–ª–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ BFS.

        –û—á–µ—Ä–µ–¥—å —Ö—Ä–∞–Ω–∏—Ç –∫–æ—Ä—Ç–µ–∂–∏ (node, idx, parent_idx, grandparent_idx).
        """
        if not root:
            return

        queue = [(root, 0, None, None)]
        index = 1  # —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –Ω–æ–≤—ã—Ö —É–∑–ª–æ–≤

        while queue:
            node, idx, parent_idx, grandparent_idx = queue.pop(0)

            parent_val = str(parent_idx) if parent_idx is not None else "N"
            grandparent_val = str(grandparent_idx) if grandparent_idx is not None else "N"
            print(f"–£–∑–µ–ª {node.val}: –∏–Ω–¥–µ–∫—Å={idx}, —Ä–æ–¥–∏—Ç–µ–ª—å={parent_val}, –¥–µ–¥—É—à–∫–∞={grandparent_val}")

            if node.left:
                queue.append((node.left, index, idx, parent_idx))
                index += 1
            if node.right:
                queue.append((node.right, index, idx, parent_idx))
                index += 1

    def dfs(self, node, parent, grandparent):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ä–µ–≤–∞"""
        if not node:
            return 0

        sum_val = node.val if grandparent and grandparent.val % 2 == 0 else 0

        grandparent_val = grandparent.val if grandparent else "N"
        parent_val = parent.val if parent else "N"
        print(f"–£–∑–µ–ª: {node.val}, –†–æ–¥–∏—Ç–µ–ª—å: {parent_val}, –î–µ–¥—É—à–∫–∞: {grandparent_val}, –°—É–º–º–∞: {sum_val}")

        sum_val += self.dfs(node.left, node, parent)
        sum_val += self.dfs(node.right, node, parent)

        return sum_val


def build_tree_correct(values):
    """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (BFS, 'N' –∑–Ω–∞—á–∏—Ç None)"""
    if not values or values[0] == "N":
        return None

    root = TreeNode(values[0])
    queue = [root]
    i = 1
    n = len(values)

    while queue and i < n:
        current = queue.pop(0)

        # –õ–µ–≤—ã–π —Ä–µ–±–µ–Ω–æ–∫
        if i < n and values[i] != "N":
            current.left = TreeNode(values[i])
            queue.append(current.left)
        i += 1

        # –ü—Ä–∞–≤—ã–π —Ä–µ–±–µ–Ω–æ–∫
        if i < n and values[i] != "N":
            current.right = TreeNode(values[i])
            queue.append(current.right)
        i += 1

    return root


def print_tree(node, level=0):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞"""
    if node is not None:
        print_tree(node.right, level=level + 1)
        print('   ' * level + str(node.val))
        print_tree(node.left, level=level + 1)


if __name__ == '__main__':
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: 34 —Å—Ç–∞–Ω–µ—Ç —Ä–µ–±–µ–Ω–∫–æ–º —É–∑–ª–∞ 98
    tree_repr = [50, 'N', 54, 98, 6, 34, 'N', 'N', 'N', 'N', 'N']

    print("üìã –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫:", tree_repr)
    print("üå≥ –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞:")

    root = build_tree_correct(tree_repr)
    print_tree(root)

    print("\n" + "="*60)

    solution = Solution()
    result = solution.sumEvenGrandparent(root)
    print(f"\nüéØ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {result}")

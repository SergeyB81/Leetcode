from collections import deque
from math import floor

class TreeNode:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞"""
    def __init__(self, val=0, left=None, right=None):
        self.val = val  # –ó–Ω–∞—á–µ–Ω–∏–µ —É–∑–ª–∞
        self.left = left  # –õ–µ–≤—ã–π –ø–æ—Ç–æ–º–æ–∫
        self.right = right  # –ü—Ä–∞–≤—ã–π –ø–æ—Ç–æ–º–æ–∫


class Solution:
    def sumEvenGrandparent(self, root: TreeNode) -> int:
        """–§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ —á—ë—Ç–Ω—ã—Ö –¥–µ–¥—É—à–µ–∫"""
        self.level_order = []  # –°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
        self.index_map = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ —É–∑–ª–æ–≤
        self.build_index_map(root)  # –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        print("\nüìå –í—ã–≤–æ–¥ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è —Å—É–º–º—ã:\n")
        return self.dfs(root, None, None)

    def build_index_map(self, root):
        """–§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã —É–∑–ª–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É —É—Ä–æ–≤–Ω—è"""
        queue = [(root, -1, -1)]  # (—É–∑–µ–ª, –∏–Ω–¥–µ–∫—Å —Ä–æ–¥–∏—Ç–µ–ª—è, –∏–Ω–¥–µ–∫—Å –¥–µ–¥—É—à–∫–∏)
        index = 0  # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —É–∑–ª–∞

        print("üìå –í—ã–≤–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–≤ —É–∑–ª–æ–≤:\n")

        while queue:
            node, parent_index, grandparent_index = queue.pop(0)

            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
            self.index_map[node] = (index, parent_index, grandparent_index)
            self.level_order.append(node)

            # –í—ã–≤–æ–¥ —É–∑–ª–∞ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–∑–Ω–∞—á–µ–Ω–∏–µ, –∏–Ω–¥–µ–∫—Å —Ä–æ–¥–∏—Ç–µ–ª—è, –∏–Ω–¥–µ–∫—Å –¥–µ–¥—É—à–∫–∏)
            print(f"{node.val if node else 'N'} {parent_index} {grandparent_index}")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ª–µ–≤–æ–≥–æ –ø–æ—Ç–æ–º–∫–∞
            if node.left:
                queue.append((node.left, index, parent_index))
            else:
                self.level_order.append(None)  # –î–æ–±–∞–≤–ª—è–µ–º 'N' –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É–∑–ª–∞
                print(f"N {index} {parent_index}")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∞–≤–æ–≥–æ –ø–æ—Ç–æ–º–∫–∞
            if node.right:
                queue.append((node.right, index, parent_index))
            else:
                self.level_order.append(None)  # –î–æ–±–∞–≤–ª—è–µ–º 'N' –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É–∑–ª–∞
                print(f"N {index} {parent_index}")

            index += 1  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É

    def dfs(self, node, parent, grandparent):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ä–µ–≤–∞"""
        if not node:
            return 0

        # –ï—Å–ª–∏ –¥–µ–¥—É—à–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ —á—ë—Ç–Ω–æ–µ, –ø—Ä–∏–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        sum_val = node.val if grandparent and grandparent.val % 2 == 0 else 0

        # –í—ã–≤–æ–¥ –ø–æ—è—Å–Ω–µ–Ω–∏–π
        grandparent_val = grandparent.val if grandparent else "N"
        parent_val = parent.val if parent else "N"
        print(f"–£–∑–µ–ª: {node.val}, –†–æ–¥–∏—Ç–µ–ª—å: {parent_val}, –î–µ–¥—É—à–∫–∞: {grandparent_val}, –°—É–º–º–∞: {sum_val}")

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ª–µ–≤–æ–≥–æ –∏ –ø—Ä–∞–≤–æ–≥–æ –ø–æ—Ç–æ–º–∫–æ–≤
        sum_val += self.dfs(node.left, node, parent)
        sum_val += self.dfs(node.right, node, parent)

        return sum_val


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
def buildTree(values):
    """–§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π (—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫)"""
    if not values or values[0] == "N":
        return None

    root = TreeNode(values[0])
    queue = [root]
    i = 1

    while queue and i < len(values):
        node = queue.pop(0)

        if values[i] != "N":
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1

        if i < len(values) and values[i] != "N":
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1

    return root


def print_tree(node, level=0):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –±–æ–∫–æ–º, –≥–¥–µ –∫–æ—Ä–µ–Ω—å - —Å–∞–º—ã–π –ª–µ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç,
    –∞ –ø—Ä–∞–≤—ã–µ –ø–æ—Ç–æ–º–∫–∏ —Ä–∏—Å—É—é—Ç—Å—è –≤—ã—à–µ, –ª–µ–≤—ã–µ - –Ω–∏–∂–µ.
    """

    if node is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∑–µ–ª (–µ—Å–ª–∏ —É–∑–µ–ª –ø—É—Å—Ç–æ–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º)

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤–∞, —É–≤–µ–ª–∏—á–∏–≤–∞—è —É—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–∞
        print_tree(node.right, level=level + 1)

        # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∑–ª–∞ —Å –æ—Ç—Å—Ç—É–ø–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è
        print(3 * ' ' * level + str(node.val))

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ª–µ–≤–æ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤–∞, —É–≤–µ–ª–∏—á–∏–≤–∞—è —É—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–∞
        print_tree(node.left, level=level + 1)


if __name__ == '__main__':
    tree_repr = [50, 'N', 54, 98, 6, 'N', 'N', 'N', 34, 'N', 'N']
    root = buildTree(tree_repr)
    print_tree(root)
    print(Solution().sumEvenGrandparent(root))


    # rep5
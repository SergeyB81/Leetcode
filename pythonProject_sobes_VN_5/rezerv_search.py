import random

"""
Алгоритм резервуарной выборки (Reservoir Sampling)
Задача: Выбрать k случайных элементов из потока данных неизвестной длины n,
где каждый элемент имеет одинаковую вероятность k/n быть выбранным.

Особенности:
- Однопроходный алгоритм (O(n) времени)
- Использует O(k) памяти
- Работает с потоком неизвестной длины
"""
"""
  Выбирает k случайных элементов из потока данных

  Параметры:
      stream: итерируемый объект (поток данных)
      k: количество элементов для выборки

  Возвращает:
      Список из k случайных элементов

  Алгоритм:
  1. Первые k элементов сразу попадают в резервуар
  2. Для каждого i-го элемента (i > k):
     - С вероятностью k/i оставляем его в резервуаре
     - Заменяем случайный элемент в резервуаре
  """

# Вспомогательная функция для печати массива
def printArray(stream, n):
    for i in range(n):
        print(stream[i], end=" ")
    print()


# Функция для выбора k случайных элементов из потока данных
def selectKItems(stream, n, k):
    i = 0  # Индекс для элементов в stream[]

    # reservoir[] - выходной массив. Инициализируем его
    # первыми k элементами из stream[]
    reservoir = [0] * k
    for i in range(k):
        reservoir[i] = stream[i]

    # Обрабатываем оставшиеся элементы, начиная с (k+1)-го
    while i < n:
        # Выбираем случайный индекс от 0 до i
        j = random.randrange(i + 1)

        # Если выбранный индекс меньше k,
        # заменяем элемент в резервуаре на текущий элемент потока
        if j < k:
            reservoir[j] = stream[i]
        i += 1

    print("Случайно выбранные k элементов:")
    printArray(reservoir, k)


# Тестирование функции
if __name__ == "__main__":
    stream = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    n = len(stream)
    k = 5
    selectKItems(stream, n, k)
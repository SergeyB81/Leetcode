import random


# Функция вычисления кумулятивной суммы списка
# Принимает: lst - список чисел
# Возвращает: список кумулятивных сумм
# Пример: [1, 2, 3] → [1, 3, 6]
def cumsum(lst):
    cumulative_sum = 0  # Инициализация накопительной суммы
    result = []  # Список для хранения результатов

    # Проходим по всем числам в исходном списке
    for num in lst:
        cumulative_sum += num  # Добавляем текущее число к сумме
        result.append(cumulative_sum)  # Сохраняем текущую сумму

    return result  # Возвращаем список кумулятивных сумм


# Функция взвешенного случайного выбора
# Принимает: probs - список вероятностей, size - количество выборов
# Возвращает: список выбранных индексов согласно вероятностям
# Пример: [0.1,0.3,0.6], 5 → [2,1,2,2,0] (примерно)
def weighted_choice(probs, size):
    cums = cumsum(probs)  # Вычисляем кумулятивные суммы вероятностей
    res = []  # Список для хранения результатов выбора

    # Делаем 'size' случайных выборов
    for _ in range(size):
        # Генерируем случайное число от 0 до 1
        r = random.uniform(0, 1)

        # Ищем первый индекс, где кумулятивная сумма >= r
        for i, c in enumerate(cums):
            if r <= c:
                res.append(i)  # Добавляем найденный индекс
                break  # Прерываем цикл после первого совпадения

    return res  # Возвращаем список выбранных индексов


# Демонстрация работы функций
if __name__ == "__main__":
    # Тестовые вероятности (сумма = 1)
    probabilities = [0.1, 0.3, 0.6]

    # Выводим кумулятивные суммы для проверки
    print("Кумулятивные суммы:", cumsum(probabilities))

    # Делаем 10 взвешенных выборов
    choices = weighted_choice(probabilities, size=10)
    print("Выбранные индексы:", choices)

    # Импортируем Counter для анализа распределения
    from collections import Counter

    print("Распределение выборки:", Counter(choices))